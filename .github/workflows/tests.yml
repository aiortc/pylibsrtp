name: tests

on: [push, pull_request]

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install packages
        run: pip install black flake8 isort
      - name: Run linters
        run: |
          flake8 src tests
          isort -c -df -rc src tests
          black --check --diff src tests

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [3.8, 3.7, 3.6, pypy3]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Install OS Packages
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install srtp
      - name: Install OS Packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libsrtp2-dev
      - name: Run tests
        run: |
          pip install -U pip setuptools wheel
          pip install coverage
          pip install .
          coverage run -m unittest discover -v
          coverage xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        if: matrix.python != 'pypy3'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  package-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Build source package
        run: python setup.py sdist
      - name: Upload source package
        uses: actions/upload-artifact@v1
        with:
          name: "dist-source"
          path: dist/

  package-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Set environment (*nix)
        if: matrix.os != 'windows-latest'
        run:
          echo "::set-env name=CIBW_BEFORE_BUILD::scripts/build-libsrtp"
          echo "::set-env name=CIBW_ENVIRONMENT::CFLAGS=-I/tmp/libsrtp/include LDFLAGS=-L/tmp/libsrtp/lib"
      - name: Set environment (windows)
        if: matrix.os == 'windows-latest'
        run:
          echo "::set-env name=CIBW_BEFORE_BUILD::scripts\build-libsrtp.bat"
          echo "::set-env name=CL::/I%TEMP%\libsrtp.install\include"
          echo "::set-env name=LINK::/LIBPATH:%TEMP%\libsrtp.install\lib"
      - name: Build wheels
        env:
          CI: true
          CIBW_SKIP: cp27-* cp33-* cp34-* pp27-*
          CIBW_TEST_COMMAND: python -m unittest discover -s {project}/tests
        shell: bash
        run: |
          pip install cibuildwheel
          cibuildwheel --output-dir dist
      - name: Upload wheels
        uses: actions/upload-artifact@v1
        with:
          name: "dist-${{ matrix.os }}"
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test, package-source, package-wheel]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: dist-source
          path: dist/
      - uses: actions/download-artifact@v1
        with:
          name: dist-macos-latest
          path: dist/
      - uses: actions/download-artifact@v1
        with:
          name: dist-ubuntu-latest
          path: dist/
      - uses: actions/download-artifact@v1
        with:
          name: dist-windows-latest
          path: dist/
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
